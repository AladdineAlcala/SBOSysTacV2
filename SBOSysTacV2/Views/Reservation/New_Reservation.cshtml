@model SBOSys.ViewModel.ReservationViewModel

<div class="content">
    <div class="box">
 
        @using (Html.BeginForm("Save_Reservation", "Reservation", FormMethod.Post, new {@class = "form-horizontal", @id = "reservationForm", role = "form"}))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            @Html.HiddenFor(m => m.reservationId)

            @Html.HiddenFor(m => m.resStat)

            @Html.HiddenFor(m => m.customerId, new {@id = "hidden_cusId"})


            <div class="box-body">

                <div class="col-sm-10">
                    <div class="form-group">
                        @Html.LabelFor(m => m.fullname, new { @class = "col-sm-2 control-label required" })
            
                        <div class="col-sm-8">

                            @Html.TextBoxFor(m => m.fullname, new {@class = "form-control", @id = "customer", @placeholder = "Search Customer"})
                            @Html.ValidationMessageFor(model => model.fullname, null, new {@class = "text-danger"})
                        </div>
                    </div>
        
                    <div class="form-group">
                        @Html.LabelFor(m => m.reserveDate, new {@class = "col-sm-2 control-label required"})
                        <div class="col-sm-8">
                            <div class="input-group date">

                                <div class="input-group-addon">
                                    <i class="fa fa-calendar"></i>
                                </div>


                                @Html.TextBoxFor(m => m.reserveDate, new {@class = "form-control pull-right", @id = "reserve_date", @value =""})
                            </div>
                            @Html.ValidationMessageFor(m => m.reserveDate, null, new {@class = "text-danger"})
                        </div>


           
                    </div>
        
                    <div class="form-group">
                        @Html.LabelFor(m => m.noofperson, new { @class = "col-sm-2 control-label" })
            
                        <div class="col-sm-8">

                            @Html.TextBoxFor(m => m.noofperson, new {@class = "form-control", @id = "noofperson", @placeholder = "Enter no of Persons"})
               
                        </div>
                    </div>
        
                    <div class="form-group">
                        @Html.LabelFor(m => m.occasion, new { @class = "col-sm-2 control-label" })
            
                        <div class="col-sm-8">

                            @Html.TextBoxFor(m => m.occasion, new {@class = "form-control", @id = "occasion", @placeholder = "Enter Occasion"})
               
                        </div>
                    </div>
                </div>
            </div>
        
            <div class="box-footer" style="padding-left: 0px;">
                <div class="col-md-5 col-sm-offset-2">

                    @*<input type="submit" value="Register " title="Register" id="btn_regCourse" class="btn btn-success btn-sm"/>*@
                    <button class="btn bg-olive btn-flat" type="submit" id="btn_reserveBooking"> Reserve</button>
                    <button class="btn bg-purple btn-flat" type="button" id="btn_cancelReserve">Cancel</button>

                </div>
            </div>

        }
    </div>
</div>

@section scripts
{

    <script type="text/javascript">
        
        var reservationUrl = {
            reserveUrl_Index: "@Url.Action("Index", "Reservation")",
            reserveUrl_listofReservations: "@Url.Action("Get_ReservationsList", "Reservation")",
            reserveUrl_createNewReservation:"@Url.Action("New_Reservation", "Reservation")"


        }

        $(function () {

            //var vm = {};
            var dateNow = new Date();

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('fullname'),

                queryTokenizer: Bloodhound.tokenizers.whitespace,

                remote: {
                    url: '/Customers/GetCustomers?query=%QUERY',
                    //url: '/Sals/Customers/GetCustomers?query=%QUERY',
                    wildcard: '%QUERY'

                }

            });

            //customers.initialize();

            $('#customer').typeahead({
                    highlight: true

                },
                {
                    name: 'customers',

                    display: 'fullname',

                    source: customers

                }).on("typeahead:selected typeahead:autocompleted",
                function (e, customer) {
                    e.preventDefault();

                    $('#hidden_cusId').val(customer.customerId);

                    //vm.customerId = customer.customerId;
                    //console.log(vm.customerId);
                });


            $('#reserve_date').datetimepicker(
                {
                    //format: "DD-MMM-YYYY",
                    //defaultDate: dateNow

                    //maxDate: moment(),
                    allowInputToggle: true,
                    enabledHours: false,
                    locale: moment().local('en'),
                    format: "DD-MMM-YYYY HH:mm A",
                    defaultDate: dateNow

                }
            );

        });


    </script>

    @Scripts.Render("~/Scripts/js_reservation.js")
}
